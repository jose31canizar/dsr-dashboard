# Generated by Django 2.0.5 on 2018-05-22 10:14

from django.db import migrations, models
import django.db.models.deletion


def populate_period(apps, schema_editor):
    Periodicity = apps.get_model('api', 'Periodicity')
    Periodicity.objects.get_or_create(id=1, name='Monthly')
    Periodicity.objects.get_or_create(id=3, name='Quarterly')
    Periodicity.objects.get_or_create(id=6, name='Semesterly')
    Periodicity.objects.get_or_create(id=12, name='Annually')


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=48)),
                ('symbol', models.CharField(max_length=4)),
                ('code', models.CharField(max_length=3)),
            ],
            options={
                'verbose_name': 'currency',
                'verbose_name_plural': 'currencies',
                'db_table': 'currency',
            },
        ),
        migrations.CreateModel(
            name='DSR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=256, null=True)),
                ('date_start', models.DateField()),
                ('date_end', models.DateField()),
                ('status', models.CharField(choices=[('upcoming', 'UPCOMING'), ('failed', 'FAILED'), ('completed', 'COMPLETED')], default='upcoming', max_length=48)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Currency')),
            ],
            options={
                'db_table': 'dsr',
            },
        ),
        migrations.CreateModel(
            name='Periodicity',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=24, unique=True)),
            ],
            options={
                'db_table': 'periodicity',
            },
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resources', models.IntegerField(default=0)),
                ('release', models.IntegerField(default=0)),
                ('release_transactions', models.IntegerField(default=0)),
                ('net_revenue', models.FloatField(default=0)),
                ('count_sales', models.BigIntegerField(default=0)),
                ('free_units', models.BigIntegerField(default=0)),
                ('dsr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.DSR')),
            ],
            options={
                'db_table': 'statistics',
            },
        ),
        migrations.CreateModel(
            name='Territory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=48)),
                ('code_2', models.CharField(max_length=2)),
                ('code_3', models.CharField(max_length=3)),
            ],
            options={
                'verbose_name': 'territory',
                'verbose_name_plural': 'territories',
                'db_table': 'territory',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='dsr',
            name='periodicity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Periodicity'),
        ),
        migrations.AddField(
            model_name='dsr',
            name='territory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Territory'),
        ),
        migrations.RunPython(populate_period),
    ]
